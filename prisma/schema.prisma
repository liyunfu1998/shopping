generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    email     String    @unique
    name      String
    password  String
    role      Role      @default(USER)
    root      Boolean   @default(false)
    mobile    String?
    addresses Address[]
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    Review    Review[]
    Order     Order[]
}

model Address {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    postalCode   String
    street       String
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?  @db.ObjectId
    province     Province @relation(fields: [provinceCode], references: [code])
    city         City     @relation(fields: [cityCode], references: [code])
    area         Area     @relation(fields: [areaCode], references: [code])
    provinceCode String
    cityCode     String
    areaCode     String
    Order        Order[]
}

model Province {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    code String @unique
    name String

    cities  City[]
    Address Address[]
}

model City {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    code         String   @unique
    name         String
    province     Province @relation(fields: [provinceCode], references: [code])
    provinceCode String
    areas        Area[]

    Address Address[]
}

model Area {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    code     String @unique
    name     String
    city     City   @relation(fields: [cityCode], references: [code])
    cityCode String

    Address Address[]
}

model Category {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String     @unique
    slug      String     @unique
    image     String
    colors    String[]
    level     Int
    parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId  String?    @db.ObjectId
    children  Category[] @relation("CategoryToCategory")
    createdAt DateTime?  @default(now())
    updatedAt DateTime?  @updatedAt
    products  Product[]
    Banner    Banner[]
    Slider    Slider[]
}

model Product {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    title         String
    price         Float
    description   String?
    discount      Float?          @default(0)
    images        String[]
    sizes         Size[]
    colors        Color[]
    category      Category        @relation(fields: [categoryId], references: [id])
    categoryId    String          @db.ObjectId
    inStock       Int             @default(0)
    sold          Int             @default(0)
    info          Info[]
    specification Specification[]
    rating        Float           @default(0)
    numReviews    Int             @default(0)
    createdAt     DateTime?       @default(now())
    updatedAt     DateTime?       @updatedAt
    Review        Review[]
    Cart          Cart[]
}

model Banner {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    image      String
    title      String
    uri        String?
    isPublic   Boolean   @default(true)
    type       String
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?   @db.ObjectId
}

model Detail {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    info          Info[]
    specification Specification[]
    optionsType   OptionsType     @default(NONE)
}

model Review {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    user           User            @relation(fields: [userId], references: [id])
    userId         String          @db.ObjectId
    product        Product         @relation(fields: [productId], references: [id])
    productId      String          @db.ObjectId
    title          String
    rating         Float           @default(0)
    comment        String?
    status         Satus           @default(PENDING)
    positivePoints PositivePoint[]
    negativePoints NegativePoint[]
    createdAt      DateTime?       @default(now())
    updatedAt      DateTime?       @updatedAt
}

model Slider {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    image      String
    title      String
    uri        String?
    isPublic   Boolean   @default(true)
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?   @db.ObjectId
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model Order {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    user          User      @relation(fields: [userId], references: [id])
    userId        String    @db.ObjectId
    address       Address   @relation(fields: [addressId], references: [id])
    addressId     String    @db.ObjectId
    mobile        String
    cart          Cart[]
    totalItems    Int
    totalPrice    Float
    totalDiscount Float
    paymentMethod String
    delivered     Boolean   @default(false)
    paid          Boolean   @default(false)
    dateOfPayment DateTime?
    createdAt     DateTime? @default(now())
    updatedAt     DateTime? @updatedAt
}

model Cart {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    itemID    String
    product   Product @relation(fields: [productId], references: [id])
    productId String  @db.ObjectId
    name      String
    price     Float
    discount  Float
    inStock   Int
    sold      Int
    color     Color?  @relation(fields: [colorId], references: [id])
    colorId   String? @db.ObjectId
    size      Size?   @relation(fields: [sizeId], references: [id])
    sizeId    String? @db.ObjectId
    img       Img     @relation(fields: [imgId], references: [id])
    imgId     String  @db.ObjectId
    quantity  Int
    Order     Order?  @relation(fields: [orderId], references: [id])
    orderId   String? @db.ObjectId
}

model Size {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    size      String
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?  @db.ObjectId
    Cart      Cart[]
}

model Color {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    hashCode  String
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?  @db.ObjectId
    Cart      Cart[]
}

model Info {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    value     String?
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?  @db.ObjectId
    Detail    Detail?  @relation(fields: [detailId], references: [id])
    detailId  String?  @db.ObjectId
}

model Specification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    value     String?
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?  @db.ObjectId
    Detail    Detail?  @relation(fields: [detailId], references: [id])
    detailId  String?  @db.ObjectId
}

model PositivePoint {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    title    String
    Review   Review? @relation(fields: [reviewId], references: [id])
    reviewId String? @db.ObjectId
}

model NegativePoint {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    title    String
    Review   Review? @relation(fields: [reviewId], references: [id])
    reviewId String? @db.ObjectId
}

model Img {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    public_id String
    url       String
    Cart      Cart[]
}

enum Role {
    USER
    ADMIN
}

enum OptionsType {
    SIZE
    COLOR
    NONE
}

enum Satus {
    PENDING
    ACCEPTED
    REJECTED
}
